<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<analysis version="2">
    <inputs>
        <input pattern="/resultfiles/PureAloha2-*.vec"/>
        <input pattern="/resultfiles/PureAloha2-*.sca"/>
    </inputs>
    <charts>
        <chart name="Chart2" type="LineChart">from omnetpp.scave import results, chart, plot

df = results.get_vectors("""
ADD vectors WHERE run=~PureAloha2-0-20170320-11:14:54-11186 AND module=~Aloha.server AND name=~serverChannelState:vector
ADD vectors WHERE run=~PureAloha2-0-20170320-11:14:54-11186 AND module=~Aloha.host[6] AND name=~radioState:vector
""")

plot.plot_vectors(df)<property name="Graph.Title" value="PureAloha2  #0"/>
        </chart>
        <chart name="Chart7" type="BarChart">from omnetpp.scave import results, chart, plot

# This expression selects the results (you might be able to logically simplify it)
filter_expression = """
ADD scalars WHERE attr:experiment=~PureAloha2 AND attr:replication=~#0 AND module=~Aloha.server AND name=~collisionLength:mean
ADD scalars WHERE attr:experiment=~PureAloha2 AND attr:replication=~#0 AND module=~Aloha.server AND name=~collisionLength:sum
ADD scalars WHERE attr:experiment=~PureAloha2 AND attr:replication=~#0 AND module=~Aloha.server AND name=~collisionLength:max
ADD scalars WHERE attr:experiment=~PureAloha2 AND attr:replication=~#0 AND module=~Aloha.server AND name=~channelUtilization:last
"""

# The data is returned as a Pandas DataFrame
df = results.get_scalars(filter_expression)

df = results.transform_results(df)

print(df)

# The scalars are transformed into a much simpler format
# df = results.pivot_scalars(df, columns=["module"], index=["name", "measurement"])

# You can perform any transformations on the data here

# Finally, the results are plotted
# plot.plot_scalars(df)
<property name="Graph.Title" value="Aloha.server"/>
        </chart>
    </charts>
</analysis>
